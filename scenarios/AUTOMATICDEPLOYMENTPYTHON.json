{
  "type": "step_based",
  "name": "Automatic Deployment Python with CONDITION",
  "active": false,
  "runAsUser": "admin",
  "checklists": {
    "checklists": []
  },
  "delayedTriggersBehavior": {
    "delayWhileRunning": true,
    "squashDelayedTriggers": true,
    "suppressTriggersWhileRunning": true
  },
  "tags": [],
  "triggers": [],
  "reporters": [],
  "params": {
    "steps": [
      {
        "id": "custom_python_qsPxeO/DRDA+sRaLhMixjg",
        "type": "custom_python",
        "name": "Bundle creation",
        "runConditionType": "RUN_IF_STATUS_MATCH",
        "runConditionStatuses": [
          "SUCCESS",
          "WARNING"
        ],
        "runConditionExpression": "",
        "resetScenarioStatus": false,
        "delayBetweenRetries": 10,
        "maxRetriesOnFail": 0,
        "params": {
          "script": "import dataiku\nfrom dataiku.scenario import Scenario\n\n\n# A few example steps follow\nclient \u003d dataiku.api_client()\n\n# set the deployer \ndeployer \u003d client.get_projectdeployer() # get the deployer handle \n\n# get the project \nproject     \u003d client.get_project(dataiku.default_project_key())\nglobal_vars \u003d project.get_variables() # get project variables \n\nbundle_id \u003d global_vars[\u0027standard\u0027][\u0027bundle_id\u0027]\n\n# create a bundle \nproject.export_bundle(bundle_id) \nproject.publish_bundle(bundle_id) # publish bundle on the deployer\n\n# create deployment and deploy the bundle \nproject_id \u003d project.project_key \ninfra_id \u003d \u0027UAT\u0027\n\ndeployment_id \u003d \u0027%s-%s-on-%s\u0027 %(project_id,bundle_id,infra_id) \n\ndeployment    \u003d deployer.create_deployment(deployment_id,project_id,infra_id,bundle_id)\n# deployment \u003d deployer.get_deployment(deployment_id)\nsettings \u003d deployment.get_settings()\nsettings_raw \u003d settings.get_raw()\nsettings.get_raw()[\u0027bundleContainerSettings\u0027][\u0027codeEnvsBehavior\u0027][\u0027envImportSpecificationMode\u0027]\u003d\u0027IGNORE\u0027\nsettings.save()\n\n\nupdate \u003d deployment.start_update()\nupdate.wait_for_result()\n\nstatus \u003d deployment.get_status()\nstatus.get_heavy()\n\ndeploy_status \u003d update.get_result()[\u0027prepareSyncReport\u0027][\u0027success\u0027]\nprint(deploy_status)\nScenario().set_scenario_variables(VariableName_deploy_status\u003ddeploy_status)\n",
          "envSelection": {
            "envMode": "INHERIT"
          },
          "proceedOnFailure": false
        }
      },
      {
        "id": "report823a826a5b9fe34b36e077f9c8806dd2",
        "type": "send_report",
        "name": "Slack Reporter",
        "runConditionType": "RUN_CONDITIONALLY",
        "runConditionStatuses": [
          "SUCCESS",
          "WARNING"
        ],
        "runConditionExpression": "VariableName_deploy_status\u003d\u003d\u0027HEALTHY\u0027",
        "resetScenarioStatus": false,
        "delayBetweenRetries": 10,
        "maxRetriesOnFail": 0,
        "params": {
          "failOnMessageNotSent": true,
          "messaging": {
            "type": "slack-scenario",
            "configuration": {
              "message": "DSS Scenario \u003c${scenarioRunURL}|${scenarioName}\u003e triggered by ${triggerName} : DEPLOYMENT WENT WELL",
              "messageMode": "TEXT_MESSAGE",
              "blocks": "[\n    {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": \"*DSS Scenario \u003c${scenarioRunURL}|${scenarioName}\u003e:* ${outcome} ${if(outcome \u003d\u003d \u0027SUCCESS\u0027, \u0027:white_check_mark:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027FAILED\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027WARNING\u0027, \u0027:red_circle:\u0027, \u0027\u0027)}${if(outcome \u003d\u003d \u0027\u0027 || outcome \u003d\u003d \u0027N/A\u0027, \u0027:bell:\u0027, \u0027\u0027)}\"\n        }\n    },\n    {\n        \"type\": \"context\",\n        \"elements\": [\n            {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Triggered by ${triggerName}\"\n            }\n        ]\n    }\n]\n",
              "mode": "WEBHOOK",
              "webhookUrl": "https://hooks.slack.com/services/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",
              "useProxy": true,
              "asUser": false,
              "linkNames": true
            }
          }
        }
      },
      {
        "id": "deploy null",
        "type": "update_projectdeployer_deployment",
        "name": "update deployment",
        "runConditionType": "RUN_IF_STATUS_MATCH",
        "runConditionStatuses": [
          "SUCCESS",
          "WARNING"
        ],
        "runConditionExpression": "",
        "resetScenarioStatus": false,
        "delayBetweenRetries": 10,
        "maxRetriesOnFail": 0,
        "params": {
          "deploymentId": "MLOPSDEMO-on-UAT",
          "newVersionId": "v02"
        }
      }
    ]
  },
  "automationLocal": false,
  "customFields": {}
}